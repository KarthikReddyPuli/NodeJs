{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["Button","onClick","this","props","name","React","Component","TextBox","type","value","onChange","App","state","list","newEntry","syncCount","handleChange","bind","handleClick","saveFile","clearAll","sendReq","event","setState","target","item","i","length","checkMatch","concat","a","push","strg","xhttp","XMLHttpRequest","self","onreadystatechange","readyState","status","console","log","JSON","parse","responseText","open","send","stringify","listItems","map","key","del","id","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.bd1e8e91.chunk.js","sourcesContent":["import React from 'react';\n\nclass Button extends React.Component{\n    render(){\n        return(\n            <button onClick={this.props.onClick}>{this.props.name}</button>\n        );\n    }\n};\n\nclass TextBox extends React.Component{\n    render(){\n        return(\n            <input type='text' value={this.props.value} onChange={this.props.onChange}/>\n        );\n    }\n};\n\nclass App extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            list: [],\n            newEntry: \"\",\n            syncCount: 0,\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n        this.saveFile = this.saveFile.bind(this);\n        this.clearAll = this.clearAll.bind(this);\n        this.sendReq(\"\");\n    }\n\n    handleChange(event){\n        this.setState({newEntry: event.target.value});\n    }\n\n    checkMatch(item){\n        for(var i=0; i<this.state.list.length; i++){\n            if(this.state.list[i] === item){\n                return false;\n            }\n        }\n        return true;\n    }\n\n    handleClick(){\n        if(this.state.newEntry !== \"\" && this.checkMatch(this.state.newEntry)){\n            this.setState({list: this.state.list.concat(this.state.newEntry), newEntry: \"\"});\n        }\n    }\n\n    del(a){\n        var list = [];\n        for(var i = 0; i < this.state.list.length; i++){\n            if(this.state.list[i] !== a)\n                list.push(this.state.list[i]);\n        }\n        this.setState({list: list});\n    }\n\n    sendReq(strg){\n        var xhttp = new XMLHttpRequest();\n        var self = this;\n        xhttp.onreadystatechange = function () {\n            if (this.readyState === 4 && this.status === 200) {\n                console.log(JSON.parse(this.responseText));\n                self.setState({list: JSON.parse(this.responseText), syncCount: self.state.syncCount+1});\n            }\n        };\n        xhttp.open(\"POST\", \"https://desolate-castle-50423.herokuapp.com/?data=\" + strg, true);\n        xhttp.send();\n    }\n\n    saveFile(){\n        var strg = JSON.stringify(this.state.list);\n        this.sendReq(strg);\n    }\n\n    clearAll(){\n        this.setState({list: []});\n    }\n\n    render(){\n        const listItems = this.state.list.map((a) => <li key={a}><Button name=\"Delete\" onClick={this.del.bind(this, a)}/> {a}</li>);\n        return(\n            <div id='base'>\n                <Button name=\"Clear List\" onClick={this.clearAll}/>\n                <TextBox value={this.state.newEntry} onChange={this.handleChange}/>\n                <Button name=\"Add\" onClick={this.handleClick}/>\n                <Button name=\"Sync\" onClick={this.saveFile}/>\n                <ul>{listItems}</ul>\n\t\t\t\t<p>Synced {this.state.syncCount} times</p>\n            </div>\n        );\n    }\n};\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}